@using Microsoft.AspNetCore.Http.Extensions
@using WebAPI.Infrastructure.SqlKata
@typeparam TResult

<nav>
    <ul class="pagination flex-wrap" hx-ext="path-params">
        <li class="page-item @(Result.HasPreviousPage?"":"disabled")">
            @if (string.IsNullOrEmpty(HtmxProps.Select))
            {
                <a class="page-link"
                   href="#"
                   hx-get="@GetUrl(Query.Page-1)"
                   hx-swap=@HtmxProps.Swap
                   hx-vals=@HtmxProps.Vals
                   hx-target=@HtmxProps.Target>Previous</a>
            }
            else
            {
                <a class="page-link"
                   href="#"
                   hx-get="@GetUrl(Query.Page-1)"
                   hx-swap=@HtmxProps.Swap
                   hx-vals=@HtmxProps.Vals
                   hx-target=@HtmxProps.Target
                   hx-select=@HtmxProps.Select>Previous</a>
            }
        </li>

        @{
            const int maxPagesToShow = 5;
            int startPage = Math.Max(1, Result.Page - (maxPagesToShow / 2));
            int endPage = Math.Min(Result.TotalPages, startPage + maxPagesToShow - 1);
            
            if (endPage - startPage + 1 < maxPagesToShow && startPage > 1)
            {
                startPage = Math.Max(1, endPage - maxPagesToShow + 1);
            }
            
            if (startPage > 1)
            {
                if (string.IsNullOrEmpty(HtmxProps.Select))
                {
                    <li class="page-item @(Result.Page==1?"active":"")">
                        <a class="page-link"
                           href="#"
                           hx-get="@GetUrl(1)"
                           hx-swap=@HtmxProps.Swap
                           hx-vals=@HtmxProps.Vals
                           hx-target=@HtmxProps.Target>1</a>
                    </li>
                }
                else
                {
                    <li class="page-item @(Result.Page==1?"active":"")">
                        <a class="page-link"
                           href="#"
                           hx-get="@GetUrl(1)"
                           hx-swap=@HtmxProps.Swap
                           hx-vals=@HtmxProps.Vals
                           hx-target=@HtmxProps.Target
                           hx-select=@HtmxProps.Select>1</a>
                    </li>
                }
                
                if (startPage > 2)
                {
                    <li class="page-item disabled">
                        <span class="page-link">...</span>
                    </li>
                }
            }
            
            for (int i = startPage; i <= endPage; i++)
            {
                int pageNumber = i;
                if (string.IsNullOrEmpty(HtmxProps.Select))
                {
                    <li class="page-item @(Result.Page==pageNumber?"active":"")">
                        <a class="page-link"
                           href="#"
                           hx-get="@GetUrl(pageNumber)"
                           hx-swap=@HtmxProps.Swap
                           hx-vals=@HtmxProps.Vals
                           hx-target=@HtmxProps.Target>@pageNumber</a>
                    </li>
                }
                else
                {
                    <li class="page-item @(Result.Page==pageNumber?"active":"")">
                        <a class="page-link"
                           href="#"
                           hx-get="@GetUrl(pageNumber)"
                           hx-swap=@HtmxProps.Swap
                           hx-vals=@HtmxProps.Vals
                           hx-target=@HtmxProps.Target
                           hx-select=@HtmxProps.Select>@pageNumber</a>
                    </li>
                }
            }
            
            if (endPage < Result.TotalPages)
            {
                if (endPage < Result.TotalPages - 1)
                {
                    <li class="page-item disabled">
                        <span class="page-link">...</span>
                    </li>
                }
                
                if (string.IsNullOrEmpty(HtmxProps.Select))
                {
                    <li class="page-item @(Result.Page==Result.TotalPages?"active":"")">
                        <a class="page-link"
                           href="#"
                           hx-get="@GetUrl(Result.TotalPages)"
                           hx-swap=@HtmxProps.Swap
                           hx-vals=@HtmxProps.Vals
                           hx-target=@HtmxProps.Target>@Result.TotalPages</a>
                    </li>
                }
                else
                {
                    <li class="page-item @(Result.Page==Result.TotalPages?"active":"")">
                        <a class="page-link"
                           href="#"
                           hx-get="@GetUrl(Result.TotalPages)"
                           hx-swap=@HtmxProps.Swap
                           hx-vals=@HtmxProps.Vals
                           hx-target=@HtmxProps.Target
                           hx-select=@HtmxProps.Select>@Result.TotalPages</a>
                    </li>
                }
            }
        }
        
        @if (string.IsNullOrEmpty(HtmxProps.Select))
        {
            <li class="page-item @(Result.HasNextPage?"":"disabled")">
                <a class="page-link"
                   href="#"
                   hx-get="@GetUrl(Query.Page+1)"
                   hx-swap=@HtmxProps.Swap
                   hx-vals=@HtmxProps.Vals
                   hx-target=@HtmxProps.Target>Next</a>
            </li>
        }
        else
        {
            <li class="page-item @(Result.HasNextPage?"":"disabled")">
                <a class="page-link"
                   href="#"
                   hx-get="@GetUrl(Query.Page+1)"
                   hx-swap=@HtmxProps.Swap
                   hx-vals=@HtmxProps.Vals
                   hx-target=@HtmxProps.Target
                   hx-select=@HtmxProps.Select>Next</a>
            </li>
        }
    </ul>
</nav>

@code {
    [Parameter, EditorRequired]
    public ListQuery Query { get; set; } = default!;
    [Parameter, EditorRequired]
    public ListResults<TResult> Result { get; set; } = default!;
    [Parameter]
    public IEnumerable<KeyValuePair<string, object?>> Parameters { get; set; } = default!;
    [Parameter, EditorRequired]
    public HtmxProps HtmxProps { get; set; } = default!;

    public string GetUrl(int page)
    {
        var parameters = new List<KeyValuePair<string, string>>();
        if (Parameters != null)
        {
            foreach (var parameter in Parameters.Where(p => p.Value != null))
            {
                parameters.Add(new KeyValuePair<string, string>(parameter.Key, parameter.Value!.ToString()!));
            }
        }
        var queryBuilder = new QueryBuilder();
        queryBuilder.Add("page", page.ToString());
        queryBuilder.Add("pageSize", Query.PageSize.ToString());
        queryBuilder.Add("ascending", Query.Ascending.ToString());
        foreach (var parameter in parameters)
        {
            queryBuilder.Add(parameter.Key, parameter.Value);
        }
        return $"{HtmxProps.Endpoint}{queryBuilder}";
    }
}
